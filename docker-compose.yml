services:
  db:
    image: postgres:17
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_JSON_FILE="'/pgadmin4/servers.json'"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./servers.json:/pgadmin4/servers.json
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`${PROJECT_NAME}-pgadmin.localhost`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.docker.network=app-network"

  backend:
    build:
      context: ./backend
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./backend/app:/var/www
    environment:
      - APP_ENV=dev
      - APP_DEBUG=1
    command: bash -c "chown -R www-data:www-data /var/www/var && php-fpm"
    networks:
      - app-network

  backend-nginx:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "8000:80"
    volumes:
      - ./backend/app:/var/www
      - ./backend/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`${PROJECT_NAME}-api.localhost`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=80"
      - "traefik.docker.network=app-network"

  frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      - backend
    volumes:
      - ./frontend/app:/app
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${PROJECT_NAME}-front.localhost`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.docker.network=app-network"

networks:
  app-network:
    external: true

volumes:
  db_data:
  pgadmin_data:
