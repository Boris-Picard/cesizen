services:
  db:
    image: postgres:17
    container_name: db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - app-network

  backend:
    build:
      context: ./backend/docker
      dockerfile: Dockerfile
    container_name: backend
    restart: unless-stopped
    environment:
      DATABASE_URL: "pgsql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}"
      APP_ENV: dev
      APP_DEBUG: '1'
    ports:
      - "8000:8000"
    depends_on:
      - db
    volumes:
      - ./backend/app:/var/www
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: docker/Dockerfile
    container_name: frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: ${VITE_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend/app:/app
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  pgadmin_data:
